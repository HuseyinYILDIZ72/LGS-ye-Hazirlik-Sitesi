# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
            - name: Node.js ortamını kurun
  kullanımlar: actions/setup-node@v4.2.0
  ile:
    # Npmrc'de always-auth'ı ayarlayın.
    always-auth: # isteğe bağlı, varsayılan değer false
    # Sürüm Kullanılacak sürümün belirtimi. Örnekler: 12.x, 10.15.1, >=10.15.0.
    düğüm sürümü: # isteğe bağlı
    # Kullanılacak sürümün Spec'ini içeren dosya. Örnekler: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # isteğe bağlı
    # Node'un kullanacağı hedef mimari. Örnekler: x86, x64. Varsayılan olarak sistem mimarisini kullanacaktır.
    mimari: # isteğe bağlı
    # Eylemin sürüm özelliğini karşılayan en son kullanılabilir sürümü denetlemesini istiyorsanız bu seçeneği ayarlayın.
    son durumu kontrol et: # isteğe bağlı
    # Auth için kurulacak isteğe bağlı kayıt defteri. Kayıt defterini proje düzeyinde .npmrc ve .yarnrc dosyasına ayarlayacak ve auth'ı env.NODE_AUTH_TOKEN'dan okuyacak şekilde ayarlayacaktır.
    kayıt-url'si: # isteğe bağlı
    # Kapsamlı kayıt defterlerine karşı kimlik doğrulama için isteğe bağlı kapsam. GitHub Paketleri kayıt defterini (https://npm.pkg.github.com/) kullanırken depo sahibine geri dönülecektir.
    kapsam: # isteğe bağlı
    # Node-versions'dan node dağıtımlarını çekmek için kullanılır. Varsayılan bir değer olduğundan, bu genellikle kullanıcı tarafından sağlanmaz. Bu eylemi github.com'da çalıştırırken, varsayılan değer yeterlidir. GHES'te çalıştırırken, hız sınırlaması yaşıyorsanız github.com için kişisel bir erişim belirteci geçirebilirsiniz.
    token: # isteğe bağlı, varsayılan ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Varsayılan dizinde önbelleğe alma için bir paket yöneticisi belirtmek için kullanılır. Desteklenen değerler: npm, yarn, pnpm.
    önbellek: # isteğe bağlı
    # Bir bağımlılık dosyasının yolunu belirtmek için kullanılır: package-lock.json, yarn.lock, vb. Birden fazla bağımlılığı önbelleğe almak için joker karakterleri veya dosya adları listesini destekler.
    önbellek-bağımlılık-yolu: # isteğe bağlı
          
